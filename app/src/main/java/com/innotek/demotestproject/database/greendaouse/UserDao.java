package com.innotek.demotestproject.database.greendaouse;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserId = new Property(0, long.class, "userId", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "username");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "nickName");
        public final static Property Height = new Property(3, int.class, "height", false, "height");
        public final static Property Age = new Property(4, int.class, "age", false, "age");
        public final static Property HasGF = new Property(5, boolean.class, "hasGF", false, "hasGF");
        public final static Property MoneyCount = new Property(6, double.class, "moneyCount", false, "moneyCount");
        public final static Property Woshi = new Property(7, String.class, "woshi", false, "woshi");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: userId
                "\"username\" TEXT," + // 1: userName
                "\"nickName\" TEXT," + // 2: nickName
                "\"height\" INTEGER NOT NULL ," + // 3: height
                "\"age\" INTEGER NOT NULL ," + // 4: age
                "\"hasGF\" INTEGER NOT NULL ," + // 5: hasGF
                "\"moneyCount\" REAL NOT NULL ," + // 6: moneyCount
                "\"woshi\" TEXT);"); // 7: woshi
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
        stmt.bindLong(4, entity.getHeight());
        stmt.bindLong(5, entity.getAge());
        stmt.bindLong(6, entity.getHasGF() ? 1L: 0L);
        stmt.bindDouble(7, entity.getMoneyCount());
 
        String woshi = entity.getWoshi();
        if (woshi != null) {
            stmt.bindString(8, woshi);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
        stmt.bindLong(4, entity.getHeight());
        stmt.bindLong(5, entity.getAge());
        stmt.bindLong(6, entity.getHasGF() ? 1L: 0L);
        stmt.bindDouble(7, entity.getMoneyCount());
 
        String woshi = entity.getWoshi();
        if (woshi != null) {
            stmt.bindString(8, woshi);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickName
            cursor.getInt(offset + 3), // height
            cursor.getInt(offset + 4), // age
            cursor.getShort(offset + 5) != 0, // hasGF
            cursor.getDouble(offset + 6), // moneyCount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // woshi
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUserId(cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHeight(cursor.getInt(offset + 3));
        entity.setAge(cursor.getInt(offset + 4));
        entity.setHasGF(cursor.getShort(offset + 5) != 0);
        entity.setMoneyCount(cursor.getDouble(offset + 6));
        entity.setWoshi(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
